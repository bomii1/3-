class Node:
	def __init__(self, key):
		self.key = key
		self.parent = self.left = self.right = None

	def __str__(self):
		return str(self.key)


class Tree:
	def __init__(self):
		self.root = None
		self.size = 0

	def __len__(self):
		return self.size
	
	#def height_update(self):

	def preorder(self, v):
		if v!= None:
			print(v.key, end = ' ')
			self.preorder(v.left)
			self.preorder(v.right)

	def inorder(self, v):
		if v != None:
			self.inorder(v.left)
			print(v.key, end = ' ')
			self.inorder(v.right)

	def postorder(self, v):
		if v != None:
			self.postorder(v.left)
			self.postorder(v.right)
			print(v.key, end = ' ')
	
	def find_loc(self, key):
		if self.size == 0:
			return None
		p = None
		v = self.root
		while v:
			if v.key == key:
				return v
			elif v.key > key:
				p = v
				v = v.left
			else:
				p = v
				v = v.right
		return p

	def search(self, key):
		p = self.find_loc(key)
		if p and p.key == key: # (p != None) and (p.key == key), 찾는 key 값이 tree에 있을 때
			return p
		else: # 찾는 key 값이 tree에 없을 때
			return None

	def insert(self, key):
	# key가 이미 트리에 있다면 에러 출력없이 None만 리턴!
		p = self.find_loc(key)
		if p == None or p.key != key:
			v = Node(key)
			if p == None:
				self.root = v
			else:
				v.parent = p
				if p.key >= key:
					p.left = v
				else:
					p.right = v
		self.size += 1
		return v
