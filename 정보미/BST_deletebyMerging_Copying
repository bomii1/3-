class Node:
	def __init__(self, key):
		self.key = key
		self.parent = self.left = self.right = None

	def __str__(self):
		return str(self.key)


class Tree:
	def __init__(self):
		self.root = None
		self.size = 0

	def __len__(self):
		return self.size

	def preorder(self, v):
		if v != None:
			print(v.key, end=' ')
			self.preorder(v.left)
			self.preorder(v.right)

	def inorder(self, v):
		if v != None:
			self.inorder(v.left)
			print(v.key, end = ' ')
			self.inorder(v.right)

	def postorder(self, v):
		if v != None:
			self.postorder(v.left)
			self.postorder(v.right)
			print(v.key, end = ' ')

	def find_loc(self, key):
		if self.size == 0:
			return None
		p = None
		v = self.root
		while v:
			if v.key == key:
				return v
			elif v.key > key:
				p = v
				v = v.left
			else:
				p = v
				v = v.right
		return p

	def search(self, key):
		p = self.find_loc(key)
		if p and p.key == key: # (p != None) and (p.key == key), 찾는 key 값이 tree에 있을 때
			return p
		else: # 찾는 key 값이 tree에 없을 때
			return None
		
	def insert(self, key):
		# key가 이미 트리에 있다면 에러 출력없이 None만 리턴!
		p = self.find_loc(key)
		if p == None or p.key != key:
			v = Node(key)
			if p == None:
				self.root = v
			else:
				v.parent = p
				if p.key >= key:
					p.left = v
				else:
					p.right = v
		self.size += 1
		return v

	def deleteByMerging(self, x):
		a, b, pt = x.left, x.right, x.parent
		if a == None: c = b
		else: # a != None
			c = m = a
			# find the largest leaf m in the subtree of a
			while m.right:
				m = m.right
			m.right = b
			if b: b.parent = m
	
		if self.root == x: # c becomes a new root
			if c: c.parent = None
			self.root = c
		else:		# c becomes a child of pt of x
			if pt.left == x: pt.left = c
			else: pt.right = c
			if c: c.parent = pt
		self.size -= 1
		
	def deleteByCopying(self, x):
		pt = x.parent
		L = x.left
		R = x.right
		if L:
			y = x.left
			while y.right:
				y = y.right
			x.key = y.key
			if y.left:
				y.left.parent = y.parent
			if y.parent.left is y:
				y.parent.left = y.left
			else:
				y.parent.right = y.left
			del y
		elif not L and R:
			y = R
			while y.left:
				y = y.left
			x.key = y.key
			if y.right:
				y.right.parent = y.parent
			if y.parent.left is y:
				y.parent.left = y.right
			else:
				y.parent.right = y.right
			del y
		else:	
			if pt == None:
				self.root = None
			else:
				if pt.left is x:
					pt.left = None
				else:
					pt.right = None
			del x
		self.size -= 1
